// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import queuesgo "github.com/merlinapp/queues-go"

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

// PublishAsync provides a mock function with given fields: ctx, event
func (_m *Publisher) PublishAsync(ctx context.Context, event *queuesgo.Event) (<-chan queuesgo.PublicationResult, error) {
	ret := _m.Called(ctx, event)

	var r0 <-chan queuesgo.PublicationResult
	if rf, ok := ret.Get(0).(func(context.Context, *queuesgo.Event) <-chan queuesgo.PublicationResult); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan queuesgo.PublicationResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *queuesgo.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishSync provides a mock function with given fields: ctx, event
func (_m *Publisher) PublishSync(ctx context.Context, event *queuesgo.Event) (string, error) {
	ret := _m.Called(ctx, event)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *queuesgo.Event) string); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *queuesgo.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
